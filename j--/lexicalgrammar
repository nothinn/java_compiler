// Lexical grammar for j--
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

// Whitespace -- ignored
" "|"\t"|"\n"|"\r"|"\f"

// Single line comment -- ignored
"//" {~("\n"|"\r")} ("\n"|"\r"["\n"])

// Reserved words
ABSTRACT    ::= "abstract"
BOOLEAN     ::= "boolean"
BREAK		::= "break"
BYTE		::= "byte"
CASE		::= "case"
CATCH		::= "catch"
CHAR        ::= "char"
CLASS       ::= "class"
CONST		::= "const"
CONTINUE	::= "continue"
DEFAULT		::= "default"
DO			::= "do"
DOUBLE		::= "double"
ELSE        ::= "else"
EXTENDS     ::= "extends"
FALSE       ::= "false"
FINAL		::= "final"
FINALLY		::= "finally"
FLOAT		::= "float"
FOR			::= "for"
GOTO		::= "goto"
IF          ::= "if"
IMPLEMENTS	::= "implements"
IMPORT      ::= "import"
INSTANCEOF  ::= "instanceof"
INT         ::= "int"
INTERFACE	::= "interface"
LONG		::= "long"
NATIVE		::= "native"
NEW         ::= "new"
NULL        ::= "null"
PACKAGE     ::= "package"
PRIVATE     ::= "private"
PROTECTED   ::= "protected"
PUBLIC      ::= "public"
RETURN      ::= "return"
SHORT		::=	"short"
STATIC      ::= "static"
STRICTFP	::= "strictfp"
SUPER       ::= "super"
SWITCH		::=	"switch"
SYNCHRONIZED ::= "synchronized"
THIS        ::= "this"
THROW		::= "throw"
THROWS		::= "throws"
TRANSIENT	::= "transient"
TRY			::= "try"
TRUE        ::= "true"
VOID        ::= "void"
VOLATILE	::= "volatile"
WHILE       ::= "while"

// Operators
ASSIGN      ::= "="
DEC			::= "--"
EQUAL       ::= "=="
NOT_EQUAL	::= "!="
CONDITIONAL_OP ::= "?"
DIV 		::= "/"
GE			::= ">="
GT          ::= ">"
INC         ::= "++"
LAND        ::= "&&"
LE          ::= "<="
LNOT        ::= "!"
LOR			::= "||"
LT			::= "<"
MINUS       ::= "-"
STAR        ::= "*"
PLUS        ::= "+"
REM 		::= "%"
PLUS_ASSIGN ::= "+="
MINUS_ASSIGN ::= "-="
DIV_ASSIGN	::= "/="
MULT_ASSIGN	::= "*="
REM_ASSIGN	::= "%="
SR_ASSIGN	::= ">>="
SL_ASSIGN	::= "<<="
SRL_ASSIGN	::= ">>>="
BWAND_ASSIGN ::= "&="
BWXOR_ASSIGN ::= "^="
BWOR_ASSIGN	::= "|="
SL          ::= "<<"
SR          ::= ">>"
SRL         ::= ">>>"
BWAND		::= "&"
BWXOR		::= "^"
BWOR		::= "|"
UC          ::= "~"



// Separators
COMMA       ::= ","
COLON		::= ":"
DOT         ::= "."
LBRACK      ::= "["
LCURLY      ::= "{"
LPAREN      ::= "("
RBRACK      ::= "]"
RCURLY      ::= "}"
RPAREN      ::= ")"
SEMI        ::= ";"

// Identifiers
IDENTIFIER ::= ("a"-"z"|"A"-"Z"|"_"|"$") {"a"-"z"|"A"-"Z"|"_"|"0"-"9"|"$"}

// Literals
INT_LITERAL    ::= "0" | ("1"-"9") {"0"-"9"}
DOUBLE_LITERAL ::=  (("0" | ("1"-"9") {"0"-"9"}) (".") ("0"-"9") {"0"-"9"}) | "." ("0"-"9") {"0"-"9"}
ESC            ::= "\\" ("n"|"r"|"t"|"b"|"f"|"'"|"\""|"\\")
STRING_LITERAL ::= "\"" {ESC | ~("\""|"\\"|"\n"|"\r")} "\""
CHAR_LITERAL   ::= "'" (ESC | ~("'"|"\n"|"\r"|"\\")) "'"
LONG_LITERAL    ::= ("0" | ("1"-"9") {"0"-"9"}) "L"
FLOAT_LITERAL  ::= ((("0" | ("1"-"9") {"0"-"9"}) (".") ("0"-"9") {"0"-"9"}) | "." ("0"-"9") {"0"-"9"} ) "f"
 
// End of file
EOF            ::= "<end of file>"


