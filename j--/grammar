// A grammar for j--, suitable for parsing by recursive descent
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

compilationUnit ::= [PACKAGE qualifiedIdentifier SEMI]
                    {IMPORT  qualifiedIdentifier SEMI}
                    {typeDeclaration} EOF 

qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}

typeDeclaration ::= ((modifiers classDeclaration) | ([PUBLIC] interfaceDeclaration)) 

modifiers ::= {PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT}

classDeclaration ::= CLASS IDENTIFIER 
                       [EXTENDS qualifiedIdentifier]
                       [IMPLEMENTS qualifiedIdentifier] //implemented in parser
                       classBody
                       

classBody ::= LCURLY {modifiers memberDecl} RCURLY

interfaceDeclaration ::= INTERFACE IDENTIFIER			
							[EXTENDS qualifiedIdentifier]
							interfaceBody

interfaceBody ::= LCURLY {modifiers interfaceMemberDecl] RCURLY 

memberDecl ::= [STATIC] block         // inner block
             | IDENTIFIER            // constructor
                 formalParameters 
                      [THROWS qualifiedIdentifier{COMMA qualifiedIdentifier}] block
             | (VOID | type) IDENTIFIER  // method
                 formalParameters
                  [THROWS qualifiedIdentifier {COMMA qualifiedIdentifier}]
                    (block | SEMI)
             | type variableDeclarators SEMI // field
             
interfaceMemberDecl ::= (VOID | type) IDENTIFIER  
							formalParameters 
                                 SEMI
						| type variableDeclarators SEMI // field

block ::= LCURLY {blockStatement} RCURLY 

blockStatement ::= localVariableDeclarationStatement
                 | statement
	
statement ::= block
            | IF parExpression statement [ELSE statement]
            | WHILE parExpression statement 
            | TRY block
              {CATCH ( formalParameter) block}
                [FINALLY block] // If no CATCH block, this must be there.
            | RETURN [expression] SEMI
            | SEMI 
            | statementExpression SEMI
            | FOR LPAREN [localVariableDeclarationStatement] SEMI [expression] SEMI [forUpdate] RPAREN statement | type IDENTIFIER COLON expression RPAREN statement

formalParameters ::= LPAREN 
                       [formalParameter {COMMA formalParameter}]
                     RPAREN

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

forUpdate ::= statementExpression {COMMA statementExpression}

localVariableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator {COMMA variableDeclarator}

variableDeclarator ::= IDENTIFIER [ASSIGN variableInitializer]
                    
variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY 
                       [variableInitializer {COMMA variableInitializer}]
                     RCURLY 

arguments ::= LPAREN [expression {COMMA expression}] RPAREN

type ::= referenceType | basicType

basicType ::= BOOLEAN | CHAR | INT | DOUBLE 

referenceType ::= basicType LBRACK RBRACK {LBRACK RBRACK}
                | qualifiedIdentifier {LBRACK RBRACK}

statementExpression ::= expression // but must have side-effect, eg i++

expression ::= assignmentExpression

assignmentExpression ::= conditionalOpExpression  // must be a valid lhs - level 13
                           [(ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | REM_ASSIGN
                             [conditionalExpression]

conditionalExpression ::=  --Level 12
	        conditionalOrExpression [ ? assignmentExpression : conditionalExpression]
							
conditionalOrExpression ::= conditionalAndExpression // level 11
							{LOR conditionalAndExpression}

conditionalAndExpression ::= bitwiseORExpression // level 10
                               {LAND bitwiseORExpression}
                               
bitwiseORExpression ::= bitwiseXORExpression // level 9
							{WXOR bitwiseXORExpression}
                               
bitwiseXORExpression ::= bitwiseANDExpression // level 8
							{BWXOR bitwiseANDExpression}

bitwiseANDExpression ::= equalityExpression // level 7
							{BWAND equalityExpression}

equalityExpression ::= relationalExpression  // level 6
                         {(EQUAL | NOT_EQUAL) relationalExpression}

relationalExpression ::= shiftExpression       // level 5
                           [(GT | LE | LT | GE) shiftExpression
                           | INSTANCEOF referenceType]

shiftExpression ::= additiveExpression          // Level 4
                         {(SL | SR | SRL ) additiveExpression}

additiveExpression ::= multiplicativeExpression // level 3
                         {(PLUS | MINUS) multiplicativeExpression}

multiplicativeExpression ::= unaryExpression       // level 2
                               {(STAR | DIV | REM) unaryExpression}

unaryExpression ::= INC unaryExpression  // level 1
                  | DEC unaryExpression
                  | MINUS unaryExpression
                  | PLUS unaryExpression
                  | UC unaryExpression
                  | simpleUnaryExpression

simpleUnaryExpression ::= LNOT unaryExpression
                        | LPAREN basicType RPAREN unaryExpression //casted
                        | LPAREN // casted               
                            referenceType
                          RPAREN simpleUnaryExpression
                        | postfixExpression 

postfixExpression ::= primary {selector} {DEC}

selector ::= DOT qualifiedIdentifier [arguments]
           | LBRACK expression RBRACK

primary ::= parExpression
          | THIS [arguments]
          | SUPER ( arguments 
                  | DOT IDENTIFIER [arguments] 
                  )
          | literal
          | NEW creator
          | qualifiedIdentifier [arguments]

creator ::= (basicType | qualifiedIdentifier) 
              ( arguments
              | LBRACK RBRACK {LBRACK RBRACK} [arrayInitializer]
              | newArrayDeclarator
              )

newArrayDeclarator ::= LBRACK expression RBRACK 
                         {LBRACK expression RBRACK} {LBRACK RBRACK}

literal ::= INT_LITERAL | CHAR_LITERAL | STRING_LITERAL | DOUBLE_LITERAL
          | TRUE        | FALSE        | NULL            
